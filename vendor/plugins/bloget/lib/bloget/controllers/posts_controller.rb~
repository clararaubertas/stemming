require 'action_controller'

module Bloget
  module Controllers
    module PostsController
      
      def self.included(base)
        base.class_eval do
          
          around_filter :load_post, :only => [:show, :edit, :update, :destroy]
          before_filter :login_required, :except => [ :index, :show, :search ]
          before_filter :authenticate_blogger, :only => [:new, :create]
          before_filter :authenticate_for_post, :only => [:edit, :update, :destroy]
          before_filter :check_post_state, :only => [:show]

          
        end
      end
      
      def index
        @title = "all blog posts about women in science/tech/engineering/math"
        @blog ||= Blog.instance
        @tags = Post.tag_counts.find_all{ |t| t.count > 1 }.concat(Post.tag_counts.find_all{ |t| t.count == 1}.sort_by{ rand }.first(15)).sort{ |x, y| x.name <=> y.name } 
        @rss = posts_url(:format => 'atom')
        
        posts = if logged_in? and Blogger.valid_blogger?(current_user)
                  Post.chronologically
                else
                  Post.published.chronologically
                end
        posts.delete_if { |p| !(p.published?) && !(p.poster == current_user) } 
        respond_to do |format|
          format.html do
            if posts.respond_to?(:paginate)
              @posts = posts.paginate(:all, :page => params[:page])
            else
              @posts = posts.find(:all)
            end  
          end
          
          format.atom do 
            if posts.respond_to?(:paginate)
              @posts = posts.paginate(:all, :page => params[:page])
            else
              @posts = posts.find(:all)
            end
            render :layout => false
          end
        end
      end
      
      def show

        @title = @post.title.downcase
        @tags = Post.tag_counts.find_all{ |t| t.count > 1 }.concat(Post.tag_counts.find_all{ |t| t.count == 1}.sort_by{ rand }.first(15)).sort{ |x, y| x.name <=> y.name } 
        @rss = {'Comments RSS' => post_url(:format => 'atom')}
        respond_to do |format|
          format.html
          format.atom { render :layout => false }
        end
      end
  
      def create
        @post = Post.new(params[:post])

        @post.poster = current_user
    
        if @post.save
          flash[:notice] = "The post was successfully saved."
          redirect_to post_url(@post)
        else
          render :action => "new"
        end
      end
  
      def new
        @post = Post.new
        @post.published = true
        @post.poster = current_user
        @title = "write new post"
      end
    
      def edit
        render
      end
  
      def update
        if @post.update_attributes(params[:post])
          redirect_to post_url(@post)
        else
          render :action => :edit
        end
      end
      
      def destroy

        if (@post.destroy)
          flash[:notice] = "Your post has been successfully deleted."
        else
          flash[:error] = "There was some problem deleting your post."
        end
        
        redirect_to posts_url

      end
      
      protected
    
      def load_post
          @post ||= Post.find_by_permalink(params[:id])
          raise ActiveRecord::RecordNotFound if @post.nil? || (!(@post.published?) && !(@post.poster == current_user))
      end
      
      def authenticate_blogger
        unless logged_in? and Blogger.valid_blogger?(current_user)
          render :nothing => true, :status => 401
        end
      end
    
      def authenticate_for_post
        @post ||= Post.find_by_permalink(params[:id])
        if (@post.poster != current_user) && (!current_user.admin?)
          render :nothing => true, :status => 401
        end
      end
      
      def check_post_state
        @post ||= Post.find_by_permalink(params[:id])
        unless @post.published? or (logged_in? and Blogger.valid_blogger?(current_user))
          render :nothing => true, :status => 401
        end
      end
      
    end
  end
end
